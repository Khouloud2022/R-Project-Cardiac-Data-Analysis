return(data)
}
# ---- Fonction d'entraînement du modèle ----
train_model <- function(data) {
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
model_data <- data %>%
select(all_of(features), condition) %>%
mutate(
condition = factor(condition, levels = c("Absence", "Présence")),
sex = as.numeric(sex) - 1,
across(c(cp, thal), ~model.matrix(~.x - 1, data = cur_data())[,-1]),
exang = as.numeric(exang) - 1
)
set.seed(123)
train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "none")
)
}
# ---- Charger les données et entraîner le modèle ----
heart_data <- load_and_preprocess_data(data_path)
model <- train_model(heart_data)
# ---- Fonction d'entraînement du modèle ----
train_model <- function(data) {
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
model_data <- data %>%
select(all_of(features), condition) %>%
mutate(
condition = factor(condition, levels = c("Absence", "Présence")),
sex = as.numeric(sex) - 1,
exang = as.numeric(exang) - 1
)
# Create dummy variables separately
cp_dummies <- model.matrix(~cp - 1, data = model_data)[,-1]
thal_dummies <- model.matrix(~thal - 1, data = model_data)[,-1]
# Combine with original data
model_data <- model_data %>%
select(-cp, -thal) %>%
bind_cols(as_tibble(cp_dummies), as_tibble(thal_dummies))
set.seed(123)
train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "none", classProbs = TRUE)
)
}
# ---- Charger les packages nécessaires ----
library(shiny)
library(shinythemes)
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(janitor)
library(caret)
library(corrplot)
library(pROC)
# ---- Définir le chemin du fichier ----
data_path <- file.path("data", "heart_cleveland_upload.csv")
# ---- Fonction de chargement et prétraitement des données ----
load_and_preprocess_data <- function(file_path) {
if (!file.exists(file_path)) {
stop("Erreur : Le fichier ", file_path, " n'existe pas.")
}
data <- read_csv(file_path) %>%
clean_names() %>%
mutate(
sex = factor(sex, levels = c(0, 1), labels = c("Femme", "Homme")),
cp = factor(cp, levels = 0:3, labels = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
fbs = factor(fbs, levels = c(0, 1), labels = c("<= 120 mg/dl", "> 120 mg/dl")),
restecg = factor(restecg, levels = 0:2, labels = c("Normal", "Anomalie onde ST-T", "Hypertrophie ventriculaire")),
exang = factor(exang, levels = c(0, 1), labels = c("Non", "Oui")),
slope = factor(slope, levels = 0:2, labels = c("Descente", "Plate", "Montée")),
thal = factor(thal, levels = c(0, 1, 2), labels = c("Normal", "Défaut fixe", "Défaut réversible")),
condition = factor(condition, levels = c(0, 1), labels = c("Absence", "Présence"))
)
if (any(is.na(data))) warning("Valeurs manquantes détectées.")
return(data)
}
# ---- Fonction d'entraînement du modèle ----
train_model <- function(data) {
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
model_data <- data %>%
select(all_of(features), condition) %>%
mutate(
condition = factor(condition, levels = c("Absence", "Présence")),
sex = as.numeric(sex) - 1,
exang = as.numeric(exang) - 1
)
# Create dummy variables separately
cp_dummies <- model.matrix(~cp - 1, data = model_data)[,-1]
thal_dummies <- model.matrix(~thal - 1, data = model_data)[,-1]
# Combine with original data
model_data <- model_data %>%
select(-cp, -thal) %>%
bind_cols(as_tibble(cp_dummies), as_tibble(thal_dummies))
set.seed(123)
train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial",
trControl = trainControl(method = "none", classProbs = TRUE)
)
}
# ---- Charger les données et entraîner le modèle ----
heart_data <- load_and_preprocess_data(data_path)
model <- train_model(heart_data)
# ---- Lancer l'application ----
source("ui.R")
runApp('app')
runApp('app')
# ---- Charger les packages nécessaires ----
library(shiny)
library(shinythemes)
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(janitor)
library(caret)
library(corrplot)
library(pROC)
library(plotly)
install.packages("plotly")
library(shiny)
library(shinythemes)
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(janitor)
library(caret)
library(corrplot)
library(pROC)
library(plotly)
install.packages("plotly")
library(shiny)
library(shinythemes)
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(janitor)
library(caret)
library(corrplot)
library(pROC)
library(plotly)
install.packages("plotly")
library(shiny)
library(shinythemes)
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(janitor)
library(caret)
library(corrplot)
library(pROC)
library(plotly)
library(randomForest)
library(e1071)
# ---- Chemin du fichier ----
data_path <- file.path("data", "heart_cleveland_upload.csv")
# ---- Fonction de chargement et prétraitement ----
load_and_preprocess_data <- function(file_path) {
tryCatch({
if (!file.exists(file_path)) stop("Fichier introuvable : ", file_path)
data <- read_csv(file_path) %>% clean_names() %>%
mutate(
sex = factor(sex, levels = c(0, 1), labels = c("Femme", "Homme")),
cp = factor(cp, levels = 0:3, labels = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
fbs = factor(fbs, levels = c(0, 1), labels = c("<= 120 mg/dl", "> 120 mg/dl")),
restecg = factor(restecg, levels = 0:2, labels = c("Normal", "Anomalie onde ST-T", "Hypertrophie ventriculaire")),
exang = factor(exang, levels = c(0, 1), labels = c("Non", "Oui")),
slope = factor(slope, levels = 0:2, labels = c("Descente", "Plate", "Montée")),
thal = factor(thal, levels = c(0, 1, 2), labels = c("Normal", "Défaut fixe", "Défaut réversible")),
condition = factor(condition, levels = c(0, 1), labels = c("Absence", "Présence"))
)
if (any(is.na(data))) warning("Valeurs manquantes détectées.")
message("Données chargées avec succès. Dimensions : ", nrow(data), " lignes, ", ncol(data), " colonnes.")
return(data)
}, error = function(e) {
stop("Erreur lors du chargement des données : ", conditionMessage(e))
})
}
# ---- Fonction de préparation des données pour le modèle ----
prepare_model_data <- function(data) {
tryCatch({
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
model_data <- data %>%
select(all_of(features), condition) %>%
mutate(
sex = as.numeric(sex == "Homme"),
exang = as.numeric(exang == "Oui")
)
cp_dummy <- model.matrix(~cp - 1, data = model_data) %>% as.data.frame()
thal_dummy <- model.matrix(~thal - 1, data = model_data) %>% as.data.frame()
colnames(cp_dummy) <- c("cp_Typique", "cp_Atypique", "cp_Douleur_non_angineuse", "cp_Asymptomatique")
colnames(thal_dummy) <- c("thal_Normal", "thal_Défaut_fixe", "thal_Défaut_réversible")
model_data <- model_data %>%
bind_cols(cp_dummy[, -1], thal_dummy[, -1]) %>%
select(-cp, -thal)
message("Données préparées pour le modèle. Colonnes : ", paste(colnames(model_data), collapse = ", "))
return(model_data)
}, error = function(e) {
stop("Erreur lors de la préparation des données : ", conditionMessage(e))
})
}
# ---- Fonction d'entraînement des modèles ----
train_models <- function(data) {
tryCatch({
model_data <- prepare_model_data(data)
set.seed(123)
train_idx <- createDataPartition(model_data$condition, p = 0.8, list = FALSE)
train_data <- model_data[train_idx, ]
test_data <- model_data[-train_idx, ]
if (nrow(test_data) == 0) {
stop("Erreur : Ensemble de test vide. Augmentez la taille des données.")
}
models <- list(
glm = train(
condition ~ ., data = train_data, method = "glm", family = "binomial",
trControl = trainControl(method = "cv", number = 5)
),
rf = train(
condition ~ ., data = train_data, method = "rf",
trControl = trainControl(method = "cv", number = 5)
),
svm = train(
condition ~ ., data = train_data, method = "svmRadial",
trControl = trainControl(method = "cv", number = 5)
)
)
message("Modèles entraînés : ", paste(names(models), collapse = ", "))
return(list(models = models, train_data = train_data, test_data = test_data))
}, error = function(e) {
stop("Erreur lors de l'entraînement des modèles : ", conditionMessage(e))
})
}
# ---- Charger les données et modèle ----
heart_data <- load_and_preprocess_data(data_path)
model_results <- train_models(heart_data)
models <- model_results$models
train_data <- model_results$train_data
test_data <- model_results$test_data
# ---- UI ----
ui <- fluidPage(
theme = shinytheme("cerulean"),
titlePanel("Analyse des Données Cardiaques"),
sidebarLayout(
sidebarPanel(
selectInput("model_type", "Choisir le modèle:",
choices = c("Régression Logistique" = "glm", "Forêt Aléatoire" = "rf", "SVM" = "svm"),
selected = "glm"),
selectInput("variable", "Choisir une variable:",
choices = c("age", "sex", "chol", "trestbps", "thalach")),
selectInput("plot_type", "Type de graphique:",
choices = c("Histogramme", "Boxplot", "Densité")),
checkboxInput("by_condition", "Segmenter par condition", value = TRUE),
sliderInput("age_range", "Plage d’âge:",
min = 29, max = 77, value = c(29, 77)),
selectInput("x_var", "Variable X (Scatter):", choices = c("age", "chol", "trestbps", "thalach")),
selectInput("y_var", "Variable Y (Scatter):", choices = c("chol", "age", "trestbps", "thalach")),
downloadButton("download_data", "Exporter les données (CSV)"),
downloadButton("download_plot", "Exporter le graphique (PNG)")
),
mainPanel(
tabsetPanel(
tabPanel("Visualisation", plotOutput("plot")),
tabPanel("Résumé", verbatimTextOutput("summary")),
tabPanel("Tableau", DTOutput("table")),
tabPanel("Corrélation", plotOutput("corr_plot")),
tabPanel("Métriques du Modèle", verbatimTextOutput("model_metrics")),
tabPanel("Importance des Variables", plotOutput("var_imp_plot")),
tabPanel("Courbe ROC", plotOutput("roc_plot")),
tabPanel("Scatter Plot", plotlyOutput("scatter_plot")),
tabPanel("Prédiction",
h3("Prédire la Maladie Cardiaque"),
numericInput("pred_age", "Âge:", value = 50, min = 29, max = 77),
selectInput("pred_sex", "Sexe:", choices = c("Femme", "Homme")),
numericInput("pred_chol", "Cholestérol (mg/dl):", value = 200, min = 126, max = 564),
numericInput("pred_trestbps", "Pression artérielle (mm Hg):", value = 120, min = 94, max = 200),
numericInput("pred_thalach", "Fréq. cardiaque max:", value = 150, min = 71, max = 202),
selectInput("pred_cp", "Douleur thoracique:",
choices = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
selectInput("pred_exang", "Angine à l’effort:", choices = c("Non", "Oui")),
selectInput("pred_thal", "Test de thallium:",
choices = c("Normal", "Défaut fixe", "Défaut réversible")),
actionButton("predict", "Prédire"),
verbatimTextOutput("prediction")
)
)
)
)
)
# ---- Server ----
server <- function(input, output, session) {
filtered_data <- reactive({
validate(
need(input$age_range[1] >= 29 && input$age_range[2] <= 77, "Plage d’âge invalide (29–77)."),
need(input$age_range[1] <= input$age_range[2], "L’âge minimum doit être inférieur ou égal à l’âge maximum.")
)
tryCatch({
heart_data %>%
filter(age >= input$age_range[1] & age <= input$age_range[2])
}, error = function(e) {
stop("Erreur lors du filtrage des données : ", conditionMessage(e))
})
})
output$plot <- renderPlot({
tryCatch({
data <- filtered_data()
if (input$plot_type == "Histogramme") {
p <- ggplot(data, aes(x = .data[[input$variable]]))
if (input$by_condition) {
p <- p + geom_histogram(aes(fill = condition), position = "dodge", bins = 30)
} else {
p <- p + geom_histogram(fill = "skyblue", bins = 30)
}
} else if (input$plot_type == "Boxplot") {
if (input$by_condition) {
p <- ggplot(data, aes(x = condition, y = .data[[input$variable]], fill = condition))
} else {
p <- ggplot(data, aes(y = .data[[input$variable]]))
}
p <- p + geom_boxplot()
} else {
p <- ggplot(data, aes(x = .data[[input$variable]]))
if (input$by_condition) {
p <- p + geom_density(aes(fill = condition), alpha = 0.5)
} else {
p <- p + geom_density(fill = "skyblue", alpha = 0.5)
}
}
p + theme_minimal() + labs(title = paste("Distribution de", input$variable))
}, error = function(e) {
stop("Erreur lors de la génération du graphique : ", conditionMessage(e))
})
})
output$summary <- renderPrint({
tryCatch({
summary(filtered_data()[, input$variable, drop = FALSE])
}, error = function(e) {
cat("Erreur lors du calcul du résumé : ", conditionMessage(e), "\n")
})
})
output$table <- renderDT({
tryCatch({
datatable(filtered_data(), options = list(pageLength = 5))
}, error = function(e) {
stop("Erreur lors de la génération du tableau : ", conditionMessage(e))
})
})
output$corr_plot <- renderCachedPlot({
tryCatch({
numeric_data <- heart_data %>%
select(age, trestbps, chol, thalach, oldpeak, ca) %>%
as.matrix()
corr <- cor(numeric_data, use = "complete.obs")
corrplot(corr, method = "color", type = "upper", tl.col = "black", tl.srt = 45,
addCoef.col = "black", number.cex = 0.7)
}, error = function(e) {
stop("Erreur lors de la génération du graphique de corrélation : ", conditionMessage(e))
})
}, cacheKeyExpr = { list("corr_plot") })
output$model_metrics <- renderPrint({
tryCatch({
model <- models[[input$model_type]]
if (is.null(model)) {
stop("Modèle non disponible : ", input$model_type)
}
if (!is.factor(test_data$condition)) {
test_data$condition <<- factor(test_data$condition, levels = c("Absence", "Présence"))
}
pred <- predict(model, newdata = test_data, type = "raw")
pred <- factor(pred, levels = levels(test_data$condition))
message("Niveaux de pred : ", paste(levels(pred), collapse = ", "))
message("Niveaux de test_data$condition : ", paste(levels(test_data$condition), collapse = ", "))
if (!identical(levels(pred), levels(test_data$condition))) {
stop("Les niveaux de pred et test_data$condition ne correspondent pas.")
}
cm <- caret::confusionMatrix(pred, test_data$condition)
roc_obj <- roc(as.numeric(test_data$condition == "Présence"),
as.numeric(predict(model, test_data, type = "prob")[,"Présence"]))
cat("Métriques du Modèle (", input$model_type, ") sur données de test :\n")
cat(sprintf("Précision : %.2f%%\n", cm$overall["Accuracy"] * 100))
cat(sprintf("Sensibilité : %.2f%%\n", cm$byClass["Sensitivity"] * 100))
cat(sprintf("Spécificité : %.2f%%\n", cm$byClass["Specificity"] * 100))
cat(sprintf("AUC : %.3f\n", auc(roc_obj)))
cat("\nMatrice de Confusion :\n")
print(cm$table)
}, error = function(e) {
cat("Erreur dans le calcul des métriques : ", conditionMessage(e), "\n")
cat("Vérifiez les données de test et le modèle sélectionné.\n")
})
})
output$var_imp_plot <- renderPlot({
tryCatch({
model <- models[[input$model_type]]
if (is.null(model)) {
stop("Modèle non disponible : ", input$model_type)
}
imp <- varImp(model, scale = TRUE)
plot(imp, main = paste("Importance des Variables (", input$model_type, ")"), top = 8)
}, error = function(e) {
stop("Erreur lors de la génération du graphique d'importance : ", conditionMessage(e))
})
})
output$roc_plot <- renderCachedPlot({
tryCatch({
model <- models[[input$model_type]]
if (is.null(model)) {
stop("Modèle non disponible : ", input$model_type)
}
roc_obj <- roc(as.numeric(test_data$condition == "Présence"),
as.numeric(predict(model, test_data, type = "prob")[,"Présence"]))
plot(roc_obj, main = paste("Courbe ROC (", input$model_type, ")"), print.auc = TRUE)
}, error = function(e) {
stop("Erreur lors de la génération de la courbe ROC : ", conditionMessage(e))
})
}, cacheKeyExpr = { list(input$model_type, "roc_plot") })
output$scatter_plot <- renderPlotly({
tryCatch({
data <- filtered_data()
plot_ly(data, x = ~.data[[input$x_var]], y = ~.data[[input$y_var]], color = ~condition,
type = "scatter", mode = "markers", marker = list(size = 10, opacity = 0.6)) %>%
layout(title = paste(input$y_var, "vs", input$x_var),
xaxis = list(title = input$x_var),
yaxis = list(title = input$y_var))
}, error = function(e) {
stop("Erreur lors de la génération du scatter plot : ", conditionMessage(e))
})
})
observeEvent(input$predict, {
tryCatch({
validate(
need(input$pred_age >= 29 && input$pred_age <= 77, "Âge doit être entre 29 et 77."),
need(input$pred_chol >= 126 && input$pred_chol <= 564, "Cholestérol doit être entre 126 et 564."),
need(input$pred_trestbps >= 94 && input$pred_trestbps <= 200, "Pression doit être entre 94 et 200."),
need(input$pred_thalach >= 71 && input$pred_thalach <= 202, "Fréquence cardiaque doit être entre 71 et 202.")
)
model <- models[[input$model_type]]
if (is.null(model)) {
stop("Modèle non disponible : ", input$model_type)
}
new_data <- data.frame(
age = input$pred_age,
sex = input$pred_sex,
chol = input$pred_chol,
trestbps = input$pred_trestbps,
thalach = input$pred_thalach,
cp = input$pred_cp,
exang = input$pred_exang,
thal = input$pred_thal
) %>%
mutate(
sex = as.numeric(sex == "Homme"),
exang = as.numeric(exang == "Oui"),
cp_Atypique = as.numeric(cp == "Atypique"),
cp_Douleur_non_angineuse = as.numeric(cp == "Douleur non angineuse"),
cp_Asymptomatique = as.numeric(cp == "Asymptomatique"),
thal_Défaut_fixe = as.numeric(thal == "Défaut fixe"),
thal_Défaut_réversible = as.numeric(thal == "Défaut réversible")
) %>%
select(age, sex, chol, trestbps, thalach, exang,
cp_Atypique, cp_Douleur_non_angineuse, cp_Asymptomatique,
thal_Défaut_fixe, thal_Défaut_réversible)
pred <- predict(model, newdata = new_data, type = "prob")
output$prediction <- renderPrint({
prob <- pred[1, "Présence"]
cat(sprintf("Probabilité de maladie (modèle %s) : %.2f%%\n", input$model_type, prob * 100))
cat("Classification : ", ifelse(prob >= 0.5, "Présence", "Absence"), "\n")
})
}, error = function(e) {
output$prediction <- renderPrint({
cat("Erreur lors de la prédiction : ", conditionMessage(e), "\n")
cat("Vérifiez les entrées et le modèle sélectionné.\n")
})
})
})
output$download_data <- downloadHandler(
filename = function() { "heart_data_filtered.csv" },
content = function(file) {
tryCatch({
write_csv(filtered_data(), file)
}, error = function(e) {
stop("Erreur lors de l'exportation des données : ", conditionMessage(e))
})
}
)
output$download_plot <- downloadHandler(
filename = function() { "plot.png" },
content = function(file) {
tryCatch({
ggsave(file, plot = ggplot2::last_plot(), device = "png", width = 8, height = 6)
}, error = function(e) {
stop("Erreur lors de l'exportation du graphique : ", conditionMessage(e))
})
}
)
}
# ---- Lancer l'application ----
shinyApp(ui = ui, server = server)
runApp('app')
runApp('app')
runApp('app')
