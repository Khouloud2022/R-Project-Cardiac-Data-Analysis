)
# ---- Lancer l'application ----
source("ui.R")
install.packages("lattice")
restart
# ---- Charger les packages nécessaires ----
library(shiny)      # Pour l'application Shiny
library(readr)      # Pour read_csv
library(dplyr)      # Pour les manipulations de données
library(ggplot2)    # Pour les visualisations
library(DT)         # Pour les tables interactives
library(janitor)    # Pour nettoyer les noms des colonnes
library(caret)      # Pour entraîner le modèle de prédiction
# ---- Charger et préparer les données ----
heart_data <- read_csv("D:/Users/khouloudouni/Downloads/projet_sante-20250521T183427Z-1-001/projet_sante/Examen/data/heart_cleveland_upload.csv")
heart_data <- heart_data %>% clean_names()
# Convertir les variables catégorielles en facteurs
heart_data <- heart_data %>%
mutate(
sex = factor(sex, levels = c(0, 1), labels = c("Femme", "Homme")),
cp = factor(cp, levels = 0:3, labels = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
fbs = factor(fbs, levels = c(0, 1), labels = c("<= 120 mg/dl", "> 120 mg/dl")),
restecg = factor(restecg, levels = 0:2, labels = c("Normal", "Anomalie onde ST-T", "Hypertrophie ventriculaire")),
exang = factor(exang, levels = c(0, 1), labels = c("Non", "Oui")),
slope = factor(slope, levels = 0:2, labels = c("Descente", "Plate", "Montée")),
thal = factor(thal, levels = c(0, 1, 2), labels = c("Normal", "Défaut fixe", "Défaut réversible")),
condition = factor(condition, levels = c(0, 1), labels = c("Absence", "Présence"))
)
# ---- Entraîner le modèle de régression logistique ----
# Sélectionner les variables pour la prédiction
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
# Convertir les facteurs en variables indicatrices pour le modèle
model_data <- heart_data %>%
select(all_of(features), condition) %>%
mutate(
sex = as.numeric(sex) - 1,  # Convertir en 0/1
cp = model.matrix(~cp - 1, data = .)[, -1],  # Dummy variables pour cp
exang = as.numeric(exang) - 1,  # Convertir en 0/1
thal = model.matrix(~thal - 1, data = .)[, -1]  # Dummy variables pour thal
)
# Entraîner le modèle
set.seed(123)  # Pour reproductibilité
model <- train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial"
)
# ---- Lancer l'application ----
source("ui.R")
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
# Interface utilisateur
ui <- fluidPage(
titlePanel("Analyse des données cardiaques"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Choisir une variable:",
choices = c("age", "sex", "chol", "trestbps", "thalach")),
selectInput("plot_type", "Type de graphique:",
choices = c("Histogramme", "Boxplot", "Densité")),
checkboxInput("by_condition", "Segmenter par condition cardiaque", value = TRUE),
sliderInput("age_range", "Plage d'âge:",
min = min(heart_data$age), max = max(heart_data$age),
value = c(min(heart_data$age), max(heart_data$age)))
),
mainPanel(
tabsetPanel(
tabPanel("Visualisation", plotOutput("plot")),
tabPanel("Résumé", verbatimTextOutput("summary")),
tabPanel("Tableau", DTOutput("table")),
tabPanel("Prédiction",
h3("Prédire la probabilité de maladie cardiaque"),
numericInput("pred_age", "Âge:", value = 50, min = 20, max = 100),
selectInput("pred_sex", "Sexe:", choices = c("Femme", "Homme")),
numericInput("pred_chol", "Cholestérol (mg/dl):", value = 200, min = 100, max = 600),
numericInput("pred_trestbps", "Pression artérielle au repos (mm Hg):", value = 120, min = 80, max = 200),
numericInput("pred_thalach", "Fréquence cardiaque maximale:", value = 150, min = 60, max = 220),
selectInput("pred_cp", "Type de douleur thoracique:",
choices = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
selectInput("pred_exang", "Angine induite par l'exercice:", choices = c("Non", "Oui")),
selectInput("pred_thal", "Résultat du test de thallium:",
choices = c("Normal", "Défaut fixe", "Défaut réversible")),
actionButton("predict", "Prédire"),
verbatimTextOutput("prediction")
)
)
)
)
)
server <- function(input, output) {
# Données filtrées pour les visualisations
filtered_data <- reactive({
heart_data %>%
filter(age >= input$age_range[1] & age <= input$age_range[2])
})
# Visualisation
output$plot <- renderPlot({
data <- filtered_data()
if (input$plot_type == "Histogramme") {
p <- ggplot(data, aes_string(x = input$variable))
if (input$by_condition) {
p <- p + geom_histogram(aes(fill = condition), position = "dodge", bins = 30)
} else {
p <- p + geom_histogram(fill = "skyblue", bins = 30)
}
} else if (input$plot_type == "Boxplot") {
if (input$by_condition) {
p <- ggplot(data, aes_string(x = "condition", y = input$variable, fill = "condition"))
} else {
p <- ggplot(data, aes_string(y = input$variable))
}
p <- p + geom_boxplot()
} else if (input$plot_type == "Densité") {
p <- ggplot(data, aes_string(x = input$variable))
if (input$by_condition) {
p <- p + geom_density(aes(fill = condition), alpha = 0.5)
} else {
p <- p + geom_density(fill = "skyblue", alpha = 0.5)
}
}
p + theme_minimal() + labs(title = paste("Distribution de", input$variable))
})
# Résumé statistique
output$summary <- renderPrint({
summary(filtered_data()[, input$variable, drop = FALSE])
})
# Tableau interactif
output$table <- renderDT({
datatable(filtered_data(), options = list(pageLength = 5))
})
# Prédiction
observeEvent(input$predict, {
# Créer un dataframe avec les entrées utilisateur
new_data <- data.frame(
age = input$pred_age,
sex = input$pred_sex,
chol = input$pred_chol,
trestbps = input$pred_trestbps,
thalach = input$pred_thalach,
cp = input$pred_cp,
exang = input$pred_exang,
thal = input$pred_thal
)
# Convertir les facteurs en variables indicatrices
new_data <- new_data %>%
mutate(
sex = as.numeric(sex == "Homme"),
cp_Atypique = as.numeric(cp == "Atypique"),
cp_Douleur_non_angineuse = as.numeric(cp == "Douleur non angineuse"),
cp_Asymptomatique = as.numeric(cp == "Asymptomatique"),
exang = as.numeric(exang == "Oui"),
thal_Défaut_fixe = as.numeric(thal == "Défaut fixe"),
thal_Défaut_réversible = as.numeric(thal == "Défaut réversible")
) %>%
select(-cp, -thal)
# Faire la prédiction
pred <- predict(model, newdata = new_data, type = "prob")
# Afficher le résultat
output$prediction <- renderPrint({
prob <- pred[1, "Présence"]
cat(sprintf("Probabilité de maladie cardiaque : %.2f%%\n", prob * 100))
if (prob >= 0.5) {
cat("Classification : Présence de maladie cardiaque")
} else {
cat("Classification : Absence de maladie cardiaque")
}
})
})
}
runApp('app')
heart_data <- read_csv("D:/Users/khouloudouni/Downloads/projet_sante-20250521T183427Z-1-001/projet_sante/Examen/data/heart_cleveland_upload.csv")
heart_data <- heart_data %>% clean_names()
heart_data <- heart_data %>%
mutate(
sex = factor(sex, levels = c(0, 1), labels = c("Femme", "Homme")),
cp = factor(cp, levels = 0:3, labels = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
fbs = factor(fbs, levels = c(0, 1), labels = c("<= 120 mg/dl", "> 120 mg/dl")),
restecg = factor(restecg, levels = 0:2, labels = c("Normal", "Anomalie onde ST-T", "Hypertrophie ventriculaire")),
exang = factor(exang, levels = c(0, 1), labels = c("Non", "Oui")),
slope = factor(slope, levels = 0:2, labels = c("Descente", "Plate", "Montée")),
thal = factor(thal, levels = c(0, 1, 2), labels = c("Normal", "Défaut fixe", "Défaut réversible")),
condition = factor(condition, levels = c(0, 1), labels = c("Absence", "Présence"))
)
# ---- Entraîner le modèle de régression logistique ----
# Sélectionner les variables pour la prédiction
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
# Convertir les facteurs en variables indicatrices pour le modèle
model_data <- heart_data %>%
select(all_of(features), condition) %>%
mutate(
sex = as.numeric(sex) - 1,  # Convertir en 0/1
cp = model.matrix(~cp - 1, data = .)[, -1],  # Dummy variables pour cp
exang = as.numeric(exang) - 1,  # Convertir en 0/1
thal = model.matrix(~thal - 1, data = .)[, -1]  # Dummy variables pour thal
)
# Entraîner le modèle
set.seed(123)  # Pour reproductibilité
model <- train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial"
)
# ---- Lancer l'application ----
source("ui.R")
runApp('app')
runApp('app')
server <- function(input, output) {
# Données filtrées pour les visualisations
filtered_data <- reactive({
heart_data %>%
filter(age >= input$age_range[1] & age <= input$age_range[2])
})
# Visualisation
output$plot <- renderPlot({
data <- filtered_data()
if (input$plot_type == "Histogramme") {
p <- ggplot(data, aes_string(x = input$variable))
if (input$by_condition) {
p <- p + geom_histogram(aes(fill = condition), position = "dodge", bins = 30)
} else {
p <- p + geom_histogram(fill = "skyblue", bins = 30)
}
} else if (input$plot_type == "Boxplot") {
if (input$by_condition) {
p <- ggplot(data, aes_string(x = "condition", y = input$variable, fill = "condition"))
} else {
p <- ggplot(data, aes_string(y = input$variable))
}
p <- p + geom_boxplot()
} else if (input$plot_type == "Densité") {
p <- ggplot(data, aes_string(x = input$variable))
if (input$by_condition) {
p <- p + geom_density(aes(fill = condition), alpha = 0.5)
} else {
p <- p + geom_density(fill = "skyblue", alpha = 0.5)
}
}
p + theme_minimal() + labs(title = paste("Distribution de", input$variable))
})
# Résumé statistique
output$summary <- renderPrint({
summary(filtered_data()[, input$variable, drop = FALSE])
})
# Tableau interactif
output$table <- renderDT({
datatable(filtered_data(), options = list(pageLength = 5))
})
# Prédiction
observeEvent(input$predict, {
# Créer un dataframe avec les entrées utilisateur
new_data <- data.frame(
age = input$pred_age,
sex = input$pred_sex,
chol = input$pred_chol,
trestbps = input$pred_trestbps,
thalach = input$pred_thalach,
cp = input$pred_cp,
exang = input$pred_exang,
thal = input$pred_thal
)
# Convertir les facteurs en variables indicatrices
new_data <- new_data %>%
mutate(
sex = as.numeric(sex == "Homme"),
cp_Atypique = as.numeric(cp == "Atypique"),
cp_Douleur_non_angineuse = as.numeric(cp == "Douleur non angineuse"),
cp_Asymptomatique = as.numeric(cp == "Asymptomatique"),
exang = as.numeric(exang == "Oui"),
thal_Défaut_fixe = as.numeric(thal == "Défaut fixe"),
thal_Défaut_réversible = as.numeric(thal == "Défaut réversible")
) %>%
select(-cp, -thal)
# Faire la prédiction
pred <- predict(model, newdata = new_data, type = "prob")
# Afficher le résultat
output$prediction <- renderPrint({
prob <- pred[1, "Présence"]
cat(sprintf("Probabilité de maladie cardiaque : %.2f%%\n", prob * 100))
if (prob >= 0.5) {
cat("Classification : Présence de maladie cardiaque")
} else {
cat("Classification : Absence de maladie cardiaque")
}
})
})
}
# ---- Charger et préparer les données ----
heart_data <- read_csv("D:/Users/khouloudouni/Downloads/projet_sante-20250521T183427Z-1-001/projet_sante/Examen/data/heart_cleveland_upload.csv")
# ---- Charger les packages nécessaires ----
library(shiny)      # Pour l'application Shiny
library(readr)      # Pour read_csv
library(dplyr)      # Pour les manipulations de données
library(ggplot2)    # Pour les visualisations
library(DT)         # Pour les tables interactives
library(janitor)    # Pour nettoyer les noms des colonnes
library(caret)      # Pour entraîner le modèle de prédiction
# ---- Charger et préparer les données ----
heart_data <- read_csv("D:/Users/khouloudouni/Downloads/projet_sante-20250521T183427Z-1-001/projet_sante/Examen/data/heart_cleveland_upload.csv")
heart_data <- heart_data %>% clean_names()
# Convertir les variables catégorielles en facteurs
heart_data <- heart_data %>%
mutate(
sex = factor(sex, levels = c(0, 1), labels = c("Femme", "Homme")),
cp = factor(cp, levels = 0:3, labels = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
fbs = factor(fbs, levels = c(0, 1), labels = c("<= 120 mg/dl", "> 120 mg/dl")),
restecg = factor(restecg, levels = 0:2, labels = c("Normal", "Anomalie onde ST-T", "Hypertrophie ventriculaire")),
exang = factor(exang, levels = c(0, 1), labels = c("Non", "Oui")),
slope = factor(slope, levels = 0:2, labels = c("Descente", "Plate", "Montée")),
thal = factor(thal, levels = c(0, 1, 2), labels = c("Normal", "Défaut fixe", "Défaut réversible")),
condition = factor(condition, levels = c(0, 1), labels = c("Absence", "Présence"))
)
# ---- Entraîner le modèle de régression logistique ----
# Sélectionner les variables pour la prédiction
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
# Convertir les facteurs en variables indicatrices pour le modèle
model_data <- heart_data %>%
select(all_of(features), condition) %>%
mutate(
sex = as.numeric(sex) - 1,  # Convertir en 0/1
cp = model.matrix(~cp - 1, data = .)[, -1],  # Dummy variables pour cp
exang = as.numeric(exang) - 1,  # Convertir en 0/1
thal = model.matrix(~thal - 1, data = .)[, -1]  # Dummy variables pour thal
)
# Entraîner le modèle
set.seed(123)  # Pour reproductibilité
model <- train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial"
)
# ---- Lancer l'application ----
source("ui.R")
model <- train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial"
)
# ---- Charger les packages nécessaires ----
library(shiny)      # Pour l'application Shiny
library(readr)      # Pour read_csv
library(dplyr)      # Pour les manipulations de données
library(ggplot2)    # Pour les visualisations
library(DT)         # Pour les tables interactives
library(janitor)    # Pour nettoyer les noms des colonnes
library(caret)      # Pour entraîner le modèle de prédiction
# ---- Charger et préparer les données ----
heart_data <- read_csv("D:/Users/khouloudouni/Downloads/projet_sante-20250521T183427Z-1-001/projet_sante/Examen/data/heart_cleveland_upload.csv")
heart_data <- heart_data %>% clean_names()
# Convertir les variables catégorielles en facteurs
heart_data <- heart_data %>%
mutate(
sex = factor(sex, levels = c(0, 1), labels = c("Femme", "Homme")),
cp = factor(cp, levels = 0:3, labels = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
fbs = factor(fbs, levels = c(0, 1), labels = c("<= 120 mg/dl", "> 120 mg/dl")),
restecg = factor(restecg, levels = 0:2, labels = c("Normal", "Anomalie onde ST-T", "Hypertrophie ventriculaire")),
exang = factor(exang, levels = c(0, 1), labels = c("Non", "Oui")),
slope = factor(slope, levels = 0:2, labels = c("Descente", "Plate", "Montée")),
thal = factor(thal, levels = c(0, 1, 2), labels = c("Normal", "Défaut fixe", "Défaut réversible")),
condition = factor(condition, levels = c(0, 1), labels = c("Absence", "Présence"))
)
# ---- Entraîner le modèle de régression logistique ----
# Sélectionner les variables pour la prédiction
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
# Convertir les facteurs en variables indicatrices pour le modèle
model_data <- heart_data %>%
select(all_of(features), condition) %>%
mutate(
sex = as.numeric(sex) - 1,  # Convertir en 0/1
cp = model.matrix(~cp - 1, data = .)[, -1],  # Dummy variables pour cp
exang = as.numeric(exang) - 1,  # Convertir en 0/1
thal = model.matrix(~thal - 1, data = .)[, -1]  # Dummy variables pour thal
)
# Entraîner le modèle
set.seed(123)  # Pour reproductibilité
model <- train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial"
)
# ---- Lancer l'application ----
source("ui.R")
runApp('app')
# ---- Charger les packages nécessaires ----
library(shiny)
library(shinythemes)  # Pour un thème personnalisé
install.packages("shinythemes")
# Interface utilisateur
ui <- fluidPage(
theme = shinytheme("cerulean"),  # Thème personnalisé
titlePanel("Analyse des Données Cardiaques"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Choisir une variable:",
choices = c("age", "sex", "chol", "trestbps", "thalach")),
selectInput("plot_type", "Type de graphique:",
choices = c("Histogramme", "Boxplot", "Densité")),
checkboxInput("by_condition", "Segmenter par condition", value = TRUE),
sliderInput("age_range", "Plage d’âge:",
min = 29, max = 77, value = c(29, 77)),
# Ajout pour le scatter plot
selectInput("x_var", "Variable X (Scatter):", choices = c("age", "chol", "trestbps", "thalach")),
selectInput("y_var", "Variable Y (Scatter):", choices = c("chol", "age", "trestbps", "thalach")),
# Bouton pour exporter
downloadButton("download_data", "Exporter les données (CSV)"),
downloadButton("download_plot", "Exporter le graphique (PNG)")
),
mainPanel(
tabsetPanel(
tabPanel("Visualisation", plotOutput("plot")),
tabPanel("Résumé", verbatimTextOutput("summary")),
tabPanel("Tableau", DTOutput("table")),
tabPanel("Corrélation", plotOutput("corr_plot")),
tabPanel("Métriques du Modèle", verbatimTextOutput("model_metrics")),
tabPanel("Scatter Plot", plotOutput("scatter_plot")),
tabPanel("Prédiction",
h3("Prédire la Maladie Cardiaque"),
numericInput("pred_age", "Âge:", value = 50, min = 29, max = 77),
selectInput("pred_sex", "Sexe:", choices = c("Femme", "Homme")),
numericInput("pred_chol", "Cholestérol (mg/dl):", value = 200, min = 126, max = 564),
numericInput("pred_trestbps", "Pression artérielle (mm Hg):", value = 120, min = 94, max = 200),
numericInput("pred_thalach", "Fréq. cardiaque max:", value = 150, min = 71, max = 202),
selectInput("pred_cp", "Douleur thoracique:",
choices = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
selectInput("pred_exang", "Angine à l’effort:", choices = c("Non", "Oui")),
selectInput("pred_thal", "Test de thallium:",
choices = c("Normal", "Défaut fixe", "Défaut réversible")),
actionButton("predict", "Prédire"),
verbatimTextOutput("prediction")
)
)
)
)
)
install.packages("shinythemes")
install.packages(c("shiny", "shinythemes", "readr", "dplyr", "ggplot2", "DT", "janitor", "caret", "corrplot", "pROC"))
runApp('app')
install.packages("caret")
library(caret)
install.packages("caret", dependencies = TRUE)
# ---- Charger les packages nécessaires ----
library(shiny)
library(shinythemes)  # Pour un thème personnalisé
library(readr)
library(dplyr)
library(ggplot2)
library(DT)
library(janitor)
library(caret)
library(corrplot)  # Pour le graphique de corrélation
library(pROC)      # Pour calculer l'AUC
# ---- Définir le chemin du fichier ----
data_path <- file.path("data", "heart_cleveland_upload.csv")  # Chemin relatif
# ---- Fonction de chargement et prétraitement des données ----
load_and_preprocess_data <- function(file_path) {
# Vérifier si le fichier existe
if (!file.exists(file_path)) {
stop("Erreur : Le fichier ", file_path, " n'existe pas. Vérifiez le chemin.")
}
# Charger les données
data <- read_csv(file_path)
data <- data %>% clean_names()
# Convertir les variables catégorielles en facteurs
data <- data %>%
mutate(
sex = factor(sex, levels = c(0, 1), labels = c("Femme", "Homme")),
cp = factor(cp, levels = 0:3, labels = c("Typique", "Atypique", "Douleur non angineuse", "Asymptomatique")),
fbs = factor(fbs, levels = c(0, 1), labels = c("<= 120 mg/dl", "> 120 mg/dl")),
restecg = factor(restecg, levels = 0:2, labels = c("Normal", "Anomalie onde ST-T", "Hypertrophie ventriculaire")),
exang = factor(exang, levels = c(0, 1), labels = c("Non", "Oui")),
slope = factor(slope, levels = 0:2, labels = c("Descente", "Plate", "Montée")),
thal = factor(thal, levels = c(0, 1, 2), labels = c("Normal", "Défaut fixe", "Défaut réversible")),
condition = factor(condition, levels = c(0, 1), labels = c("Absence", "Présence"))
)
# Vérifier les valeurs manquantes
if (any(is.na(data))) {
warning("Attention : Présence de valeurs manquantes dans les données.")
}
return(data)
}
# ---- Fonction d'entraînement du modèle ----
train_model <- function(data) {
features <- c("age", "sex", "chol", "trestbps", "thalach", "cp", "exang", "thal")
model_data <- data %>%
select(all_of(features), condition) %>%
mutate(
sex = as.numeric(sex) - 1,
cp = model.matrix(~cp - 1, data = .)[, -1],
exang = as.numeric(exang) - 1,
thal = model.matrix(~thal - 1, data = .)[, -1]
)
set.seed(123)
model <- train(
condition ~ .,
data = model_data,
method = "glm",
family = "binomial"
)
return(model)
}
# ---- Charger les données et entraîner le modèle ----
heart_data <- load_and_preprocess_data(data_path)
model <- train_model(heart_data)
# ---- Lancer l'application ----
source("ui.R")
runApp('app')
